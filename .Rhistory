lifeExp = colDef(
aggregate = "mean",
format = colFormat(suffix = "years", separators = F,digits = 2)
),
pop = colDef(
aggregate = "sum",
format = colFormat(suffix = "pop", separators = T),
footer = function(values) {
if (!is.numeric(values)) return()
sparkline(values, type = "box", width = 100, height = 30)
}
),
gdpPercap = colDef(aggregate = "sum",
format = colFormat(currency = "USD", digits = 2,separators = T),
footer = function(values) {
if (!is.numeric(values)) return()
sparkline(values, type = "box", width = 100, height = 30)
})
)
)
#Multiple grouping
reactable(
data,
groupBy = c("continent","year"),
columns = list(
country = colDef(
aggregate = "count",
format = list(
aggregated = colFormat(suffix = "countries")
)
),
lifeExp = colDef(
aggregate = "mean",
format = colFormat(suffix = "years", separators = F,digits = 2),
footer = function(values) {
if (!is.numeric(values)) return()
sparkline(values, type = "box", width = 100, height = 30)
}
),
pop = colDef(
aggregate = "sum",
format = colFormat(suffix = "pop", separators = T),
footer = function(values) {
if (!is.numeric(values)) return()
sparkline(values, type = "box", width = 100, height = 30)
}
),
gdpPercap = colDef(aggregate = "sum",
format = colFormat(currency = "USD", digits = 2,separators = T),
footer = function(values) {
if (!is.numeric(values)) return()
sparkline(values, type = "box", width = 100, height = 30)
})
)
)
data %>% datatable(, # reactive data
class = "display nowrap compact", # style
filter = "top", # location of column filters
options = list(  # options
scrollX = TRUE, # allow user to scroll wide tables horizontally
stateSave = TRUE
)
)
data %>% datatable(, # reactive data
class = 'cell-border stripe', # style
filter = "top", # location of column filters
options = list(  # options
scrollX = TRUE, # allow user to scroll wide tables horizontally
stateSave = TRUE
)
)
data %>% datatable(, # reactive data
class = 'cell-border stripe', # style
rownames = FALSE,#Do not display rownames
editable = 'cell', #You can edit any cell
filter = "top", # location of column filters
options = list(  # options
scrollX = TRUE, # allow user to scroll wide tables horizontally
stateSave = TRUE
),
caption = htmltools::tags$caption(
style = 'caption-side: bottom; text-align: center;',
'Table 2: ', htmltools::em('Firtering the countries with respect to the remittance values')
)
)
data %>% datatable(, # reactive data
class = 'cell-border stripe', # style
rownames = FALSE,#Do not display rownames
editable = 'cell', #You can edit any cell
filter = "top", # location of column filters
options = list(  # options
scrollX = TRUE, # allow user to scroll wide tables horizontally
stateSave = TRUE
),
caption = htmltools::tags$caption(
style = 'caption-side: bottom; text-align: center;',
'Table 2: ', htmltools::em('Firtering the countries with respect to the remittance values')
),
callback = JS('table.page("next").draw(false);')
)
data %>% datatable(, # reactive data
class = 'cell-border stripe', # style
rownames = FALSE,#Do not display rownames
editable = 'cell', #You can edit any cell
filter = "top", # location of column filters
options = list(  # options
scrollX = TRUE, # allow user to scroll wide tables horizontally
stateSave = TRUE
),
caption = htmltools::tags$caption(
style = 'caption-side: bottom; text-align: center;',
'Table 2: ', htmltools::em('Firtering the countries with respect to the remittance values')
),
#datatable(m, escape = 1), # escape the first column for the security purpose
#datatable(m, escape = 2),  # escape the second column
callback = JS('table.page("next").draw(false);'),
#Exporting the data
extensions = 'Buttons', options = list(
dom = 'frtipB',
buttons =
list('copy', 'print', list(
extend = 'collection',
buttons = c('csv', 'excel', 'pdf'),
text = 'Download'
))
)
)
data %>% datatable(, # reactive data
class = 'cell-border stripe', # style
rownames = FALSE,#Do not display rownames
editable = 'cell', #You can edit any cell
filter = "top", # location of column filters
caption = htmltools::tags$caption(
style = 'caption-side: bottom; text-align: center;',
'Table 2: ', htmltools::em('Firtering the countries with respect to the remittance values')
),
#datatable(m, escape = 1), # escape the first column for the security purpose
#datatable(m, escape = 2),  # escape the second column
callback = JS('table.page("next").draw(false);'),
#Exporting the data
extensions = 'Buttons', options = list(
scrollX = TRUE, # allow user to scroll wide tables horizontally
scrollY = TRUE,
stateSave = TRUE,
dom = 'frtipB',
buttons =
list('copy', 'print', list(
extend = 'collection',
buttons = c('csv', 'excel', 'pdf'),
text = 'Download'
))
)
)
df<-c("bank_of_kigali","Unguka_bank","Cogebanque","access_bank")
str_detect("ban",df)
str_detect(df,"ban")
dataframe<-data.frame(col1=c("bank_of_kigali","Unguka_bank","Cogebanque","access_bank"))
dataframe<-dataframe %>% mutate(bank=ifelse(str_detect(df$col1,"ban"),"Bank","Others"))
dataframe
dataframe<-dataframe %>% mutate(bank=ifelse(str_detect(col1,"ban"),"Bank","Others"))
dataframe
dataframe<-data.frame(col1=c("bank_of_kigali","Unguka_bank","Cogebanque","access_bank","Money-gram"))
dataframe<-dataframe %>% mutate(bank=ifelse(str_detect(col1,"ban"),"Bank","Others"))
dataframe
dataframe<-dataframe %>% mutate(channels=ifelse(str_detect(col1,"ban"),"Bank","Others"))
dataframe
count(str_detect(dataframe$col1,"ban"))
sum(str_detect(dataframe$col1,"ban"))
table(str_detect(dataframe$col1,"ban"))
shiny::runGitHub("amrrs/sample_revenue_dashboard_shiny")
library(coronavirus)
update_dataset()
data(coronavirus)
View(coronavirus)
#data(coronavirus)
#View(coronavirus)
max(coronavirus$date)
colnames(data)
data %>% reactable(
filterable = TRUE,
searchable = TRUE,
minRows = 10,
paginationType = "jump",
groupBy = c("continent",'country','year')) %>%
add_source("Source: BNREDWH")
library(reactable)
data %>% reactable(
filterable = TRUE,
searchable = TRUE,
minRows = 10,
paginationType = "jump",
groupBy = c("continent",'country','year')) %>%
add_source("Source: BNREDWH")
library(DT)
data %>% reactable(
filterable = TRUE,
searchable = TRUE,
minRows = 10,
paginationType = "jump",
groupBy = c("continent",'country','year')) %>%
add_source("Source: BNREDWH")
data %>% reactable(
filterable = TRUE,
searchable = TRUE,
minRows = 10,
paginationType = "jump",
groupBy = c("continent",'country','year')) #%>%
data %>% datatable( # reactive data
class = 'cell-border stripe', # style
rownames = FALSE,#Do not display rownames
editable = 'cell', #You can edit any cell
filter = "top", # location of column filters
caption = htmltools::tags$caption(
style = 'caption-side: bottom; text-align: center;',
'Table 2: ', htmltools::em('Firtering the countries with respect to the remittance values')
),
#datatable(m, escape = 1), # escape the first column for the security purpose
#datatable(m, escape = 2),  # escape the second column
callback = JS('table.page("next").draw(false);'),
#Exporting the data
extensions = 'Buttons', options = list(
scrollX = TRUE, # allow user to scroll wide tables horizontally
scrollY = TRUE,
stateSave = TRUE,
dom = 'frtipB',
buttons =
list('copy', 'print', list(
extend = 'collection',
buttons = c('csv', 'excel', 'pdf'),
text = 'Download'
))
)
)
q()
htmltools::browsable(
tagList(
reactable(data, elementId = "data"),
csvDownloadButton("data", "Download as CSV", filename = "data.csv")
)
)
#Reactive data set with filter and grouping with columns-----
library(tidyverse)
library(gapminder)
library(reactable)
library(reactablefmtr)
#Ressources:
#1.https://glin.github.io/reactable/articles/examples.html#column-groups
#2.https://kcuilla.github.io/reactablefmtr/index.html
data<-gapminder
dim(data)
#add_source("Source: BNREDWH")
#Create function for downlaod handle
library(reactable)
library(htmltools)
csvDownloadButton <- function(tableId, label = "Download as CSV", filename = "data.csv") {
htmltools::tags$button(
label,
onclick = sprintf("Reactable.downloadDataCSV('%s', '%s')", tableId, filename)
)
}
htmltools::browsable(
tagList(
reactable(data, elementId = "data"),
csvDownloadButton("data", "Download as CSV", filename = "data.csv")
)
)
data %>% datatable( # reactive data
class = 'cell-border stripe', # style
rownames = FALSE,#Do not display rownames
editable = 'cell', #You can edit any cell
filter = "top", # location of column filters
caption = htmltools::tags$caption(
style = 'caption-side: bottom; text-align: center;',
'Table 2: ', htmltools::em('Firtering the countries with respect to the remittance values')
),
#datatable(m, escape = 1), # escape the first column for the security purpose
#datatable(m, escape = 2),  # escape the second column
callback = JS('table.page("next").draw(false);'),
#Exporting the data
extensions = 'Buttons', options = list(
scrollX = TRUE, # allow user to scroll wide tables horizontally
scrollY = TRUE,
stateSave = TRUE,
dom = 'frtipB',
buttons =
list('copy', 'print', list(
extend = 'collection',
buttons = c('csv', 'excel', 'pdf'),
text = 'Download'
))
)
)
library(reactable)
data %>% datatable( # reactive data
class = 'cell-border stripe', # style
rownames = FALSE,#Do not display rownames
editable = 'cell', #You can edit any cell
filter = "top", # location of column filters
caption = htmltools::tags$caption(
style = 'caption-side: bottom; text-align: center;',
'Table 2: ', htmltools::em('Firtering the countries with respect to the remittance values')
),
#datatable(m, escape = 1), # escape the first column for the security purpose
#datatable(m, escape = 2),  # escape the second column
callback = JS('table.page("next").draw(false);'),
#Exporting the data
extensions = 'Buttons', options = list(
scrollX = TRUE, # allow user to scroll wide tables horizontally
scrollY = TRUE,
stateSave = TRUE,
dom = 'frtipB',
buttons =
list('copy', 'print', list(
extend = 'collection',
buttons = c('csv', 'excel', 'pdf'),
text = 'Download'
))
)
)
library(DT)
data %>% datatable( # reactive data
class = 'cell-border stripe', # style
rownames = FALSE,#Do not display rownames
editable = 'cell', #You can edit any cell
filter = "top", # location of column filters
caption = htmltools::tags$caption(
style = 'caption-side: bottom; text-align: center;',
'Table 2: ', htmltools::em('Firtering the countries with respect to the remittance values')
),
#datatable(m, escape = 1), # escape the first column for the security purpose
#datatable(m, escape = 2),  # escape the second column
callback = JS('table.page("next").draw(false);'),
#Exporting the data
extensions = 'Buttons', options = list(
scrollX = TRUE, # allow user to scroll wide tables horizontally
scrollY = TRUE,
stateSave = TRUE,
dom = 'frtipB',
buttons =
list('copy', 'print', list(
extend = 'collection',
buttons = c('csv', 'excel', 'pdf'),
text = 'Download'
))
)
)
####______________
library(crosstalk)
shared_mtcars <- SharedData$new(data)
bscols(widths = c(2,NA,NA) ,
list(
filter_checkbox("continent", "Continents", shared_mtcars, ~continent,inline = F),
filter_slider("year", "Year", shared_mtcars, ~year, width = "100%",animate = F),
filter_select("country", "Country", shared_mtcars, ~country)
),
DT::datatable(shared_mtcars,rownames = F,filter = "top",
extensions = c('Buttons','Scroller',"Responsive",'FixedHeader'),
options = list(pageLength=10,
lengthMenu=c(20,50,100,150),
dom = 'frtipB',
buttons =
list('copy', 'print', list(
extend = 'collection',
buttons = c('csv', 'excel', 'pdf'),
text = 'Download'
))
))
)
library(downloadthis)
table<-reactable::reactable(
data,
groupBy = c("continent","year"))
table %>% save_reactable( "table.csv")
2924000*0.06
2924000*0.1
max(data$gdpPercap)
rowMaxs(data)
data %>% summarise_if(is.numeric,max)
max(data$year)
data %>% filter(pop==max(pop))
#Some key importance on data
#1. Check max on multiple column
data %>% summarise_if(is.numeric, max)
#2. Filter rows on which some column is max
data %>% filter(which.max(pop))
#2. Filter rows on which some column is max
data %>% which.max(pop)
#2. Filter rows on which some column is max
data %>% filter(pop==max(pop))
data %>% filter(pop==min(pop))
data %>% filter(pop==min(pop))[,c(1,5)]
data %>% filter(pop==min(pop))#[,c(1,5)]
data %>% filter(pop==min(pop))[,c(1,5)]
data %>% filter(pop==min(pop)) %>%[,c(1,5)]
data %>% filter(pop==min(pop)) %>%[c(1,5)]
data %>% filter(pop==min(pop))[c(1,5)]
data %>% group_by(continent) %>% filter(pop==min(pop))
install.packages("rmdformats")
install.packages(c("xaringan", "xaringanthemer"))
install.packages("pagedown")
install.packages("pagedown")
library(DBI)
install.packages('Rcpp')
install.packages("Rcpp")
install.packages("pagedreport")
remotes::install_github("rfortherestofus/pagedreport", ref = "main")
install.packages("rsvg")
library(rsvg)
library(rsvg)
Sys.time()
Sys.Date()
setwd("~/Desktop/BLOG/myblog")
q()
install.packages("distill")
install.packages("postcards")
q()
getwd()
q()
q()
@import url('https://fonts.googleapis.com/css2?family=Fira+Mono');
d-article div.sourceCode code,
d-article pre code {
font-family: 'Fira Code', monospace;
font-size: 1rem;
}
.fixbar {
width: 100%;
height:30px;
position: fixed;
left: 0px;
top: 0px;
right:0 height: 30px;
background: red;
z-index: 1;
}
#search {
position: absolute;
right:20px;
top: 0px;
width: 30px;
height: 22px;
z-index: 2;
background:blue;
}
q()
#footer {
/* Look here*/ position: fixed;
padding: 10px 10px 0px 10px;
bottom: 0;
width: 100%;
height: 40px;
}
rmarkdown::render_site()
navbar:
# (navbar definition here)
output:
distill::distill_article:
css: styles.css
file.create(".nojekyll")
usethis::create_github_token()
gitcreds::gitcreds_set()
f <-file("http://archive.ics.uci.edu/ml/machine-learning-databases/acute/diagnosis.data", open="r" ,encoding="UTF-16LE")
data <- read.table(f, dec=",", header=F)
View(head(data))
here::here()
data<-read.table(here:here("/data/breast-cancer.data", dec=",", header=T))
data<-read.table(here::here("/data/breast-cancer.data", dec=",", header=T))
data<-read.table(here::here("/data/breast-cancer.data", dec=",", header=F))
data<-read.table(here::here("/data/breast-cancer.data"), fileEncoding = "UTF-8", sep = ",")
data<-read.table(here::here("/data/breast-cancer.data"), fileEncoding = "UTF-8", sep ="\t")
data<-rio::import(here::here("/data/breast-cancer.data"))
here::here()
data<-rio::import("C:/Users/jmurera/Desktop/Blog/myblog/data/breast-cancer.data")
f <-file("https://github.com/datasets/breast-cancer/blob/master/data/breast-cancer.csv")
data <- read.table(f, dec=",", header=T)
f <-file("https://github.com/datasets/breast-cancer/blob/master/data/breast-cancer.csv")
data <- read.table(f, dec=",", header=F)
f <-file("https://github.com/datasets/breast-cancer/blob/master/data/breast-cancer.csv")
data <- read.csv(f,header=T)
View(data)
data<-rio::import("C:/Users/jmurera/Desktop/Blog/myblog/data/breast-cancer.csv")
data<-rio::import("C:/Users/jmurera/Desktop/Blog/myblog/data/Breast_cancer_data.csv")
View(head(data))
install.packages("tidymodels")
View(data)
str(data)
table(data$diagnosis)
data<-rio::import("C:/Users/jmurera/Desktop/Blog/myblog/data/Breast_cancer_data.csv") %>% mutate_if(is.integer, as.factor())
library(tidymodels)
data<-rio::import("C:/Users/jmurera/Desktop/Blog/myblog/data/Breast_cancer_data.csv") %>% mutate_if(is.integer, as.factor())
data<-rio::import("C:/Users/jmurera/Desktop/Blog/myblog/data/Breast_cancer_data.csv") data<-data%>% mutate_if(is.integer, as.factor())
data<-rio::import("C:/Users/jmurera/Desktop/Blog/myblog/data/Breast_cancer_data.csv") data<-data%>% mutate_if(is.integer, as.factor())
data<-rio::import("C:/Users/jmurera/Desktop/Blog/myblog/data/Breast_cancer_data.csv")
data<-rio::import("C:/Users/jmurera/Desktop/Blog/myblog/data/Breast_cancer_data.csv") data<-data%>% mutate_if(is.integer, as.factor)
data<-data%>% mutate_if(is.integer, as.factor)
str(data)
library(flextable)
ft <- flextable(head(data))
ft <- autofit(ft)
for(i in 1:2){
flextable_to_rmd(ft)
}
install.packages("distilltools")
remotes::install_github("EllaKaye/distilltools")
install.packages("distill")
install.packages("distilltools")
remotes::install_github("EllaKaye/distilltools")
devtools::install_github("EllaKaye/distilltools")
500000-238000
install.packages("postcards")
q()
knitr::include_graphics(here::here("images/dbR.jpg"))
